# Fermat primality test with probabilistic search of 'a'
# domain of the function is n > 2

initial-state Ţ

# on the tape we expect binary number 'n', for example 10, that should be tested for primality
# first decrement the number which will help us with selection of 'a'; n -> n-1
import-subroutine [replace state Û with Ţ and Ü with š and Ý with Ů and Þ with ů] src/main/resources/subroutines/decrement.txt

# go to the blank symbol next to the left-most digit of the number 'n-1'
δ : š × − → š × − × L
δ : š × # → ś × # × L

# write 2 next to the 'n-1' (here, next to the 9), e.g. 2#9; 2 represents minimal 'a' here
δ : ś × # → Ŧ × 0 × L
δ : Ŧ × # → Ũ × 1 × N

# probabilistic transition function - choose what's next

## option 1: increment right number (n-1 -> n) and continue to modulo
random δ : Ũ × − → ū × − × N
### go to the 'n-1'
δ : ū × − → ū × − × R
δ : ū × # → ũ × # × R
### 'n-1' -> 'n' and continue to congruence (Ī is congruence entry state)
import-subroutine [replace state Ŏ with ũ and Ő with ű] src/main/resources/subroutines/increment.txt
### go to the left-most digit of the 'a'
δ : ű × 1 → ű × 1 × L
δ : ű × 0 → ű × 0 × L
δ : ű × # → Ű × # × L
δ : Ű × − → Ű × − × L
δ : Ű × # → Ī × # × R

## option 2: iff a == n-1, continue with option 1, otherwise increment 'a' and choose again (recursion)
random δ : Ũ × − → Œ × − × N
import-subroutine src/main/resources/subroutines/binary-number-comparator.txt
### a == n-1, therefore continue with option 1
δ : Ś × − → ū × − × N
### a < n-1, increment 'a' and choose between option 1 and 2 again
import-subroutine [replace state Ŏ with Š and Ő with Ũ and ŏ with Ŭ and ő with ŭ] src/main/resources/subroutines/increment.txt

## congruence a^(n-1) ≡ 1 (mod n)
## boolean algebra: result is 1 if n is prime or Fermat pseudoprime and 0 if n is Fermat witness (n is not a prime number)
import-subroutine src/main/resources/subroutines/fermat-congruence-modulo.txt
